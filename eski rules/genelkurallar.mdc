---
description: 
globs: 
alwaysApply: true
---
# Rezidans ve Site Yönetim Sistemi - Cursor Geliştirme Kuralları

Bu doküman, Rezidans ve Site Yönetim Sistemi projesinin Cursor uygulaması üzerinde geliştirilmesi sırasında uyulması gereken kuralları içerir.

## 1. Genel Kurallar

1. **Teknoloji Seçimi:**
   - Backend: .NET 8 Web API (C#) ve MSSQL kullanılacaktır.
   - Frontend: React.js ve Material UI ile geliştirilecektir.
   - Mobil: React Native ile geliştirilecektir.
   
2. **API Önceliği:**
   - Proje tamamen API'den çalışacaktır. Tüm geliştirme ekranlarında API bağlantısının yapılacağı dikkate alınmalıdır.

3. **Multi-tenant ve Şube Yapısı:**
   - Tüm tablolarda FirmaID ve SubeID alanları bulunacaktır.
   - Login olan kullanıcı hangi firma ve şubesi için tanımlandıysa o firma ve şubesi için işlemler yapabilecektir.

4. **Component Yapısı:**
   - Tüm kodlar, component yapısında parçalara ayrılacak şekilde yazılacaktır.
   - Hiçbir component dosyası 400 satırı geçmeyecek şekilde tasarlanacaktır.
   - Komponentler, tekrar kullanılabilir olacak şekilde tasarlanacaktır.

5. **Yetki Sistemi:**
   - Her kullanıcı kendisine atanan yetki seviyesine göre işlem yapacaktır.
   - Tüm formlarda yetki kontrolü (ekle, yenile, sil, gör) olmalıdır.

## 2. Dosya ve Klasör Yapısı

### 2.1. Backend (C:\c\Residence Management\Backend)

1. **Katmanlar:**
   - `API`: API kontrollerlerini içerir
   - `Services`: İş mantığını içerir
   - `Repositories`: Veri erişim katmanı
   - `Models`: Veri modellerini içerir
   - `Migrations`: Database migration scriplerini içerir
   - `Configurations`: Yapılandırma sınıflarını içerir

2. **İsimlendirme:**
   - Tüm dosya ve klasör isimleri PascalCase kullanılacaktır
   - Kontroller sınıfları "Controller" son eki alacaktır (ör. DaireController)
   - Servis sınıfları "Service" son eki alacaktır (ör. KullaniciService)
   - Repository sınıfları "Repository" son eki alacaktır (ör. OdemeRepository)

### 2.2. Frontend (C:\c\Residence Management\FrondEnd)

1. **Componentler:**
   - Her component, `components` klasörü altında ayrı bir klasörde tutulacaktır.
   - Component klasörleri, component adıyla aynı olacak şekilde isimlendirilecektir (ör. `components/Header/Header.jsx`).
   - Her component klasörü, ilgili component için gerekli olan stil dosyalarını içerebilir.

2. **Sayfalar:**
   - Sayfalar, `pages` klasörü altında tutulacaktır.
   - Her sayfa, mümkün olduğunca küçük ve sade tutulacak, logic kısımları componentlere taşınacaktır.

3. **Servisler:**
   - API istekleri, `services` klasörü altında toplanacaktır.
   - Her servis dosyası, ilgili veri modeline göre isimlendirilecektir (ör. `services/daireService.js`).

4. **Yardımcı Fonksiyonlar:**
   - Proje genelinde kullanılacak yardımcı fonksiyonlar, `utils` klasörü altında toplanacaktır.

### 2.3. Mobil (C:\c\Residence Management\mobil)

1. **Screens:**
   - Ekranlar, `screens` klasörü altında tutulacaktır.
   - Her ekran, ilgili işleve göre isimlendirilecektir (ör. `screens/DaireDetay.js`).

2. **Componentler:**
   - Ortak komponentler, `components` klasörü altında toplanacaktır.

3. **Servisler:**
   - API istekleri, `services` klasörü altında toplanacaktır.

## 3. Kod Stili ve Formatlama

1. **Kod Formatlama:**
   - Kod, Prettier ve ESLint (Frontend) veya StyleCop (Backend) kullanılarak formatlanacaktır.
   - Kod formatlama kuralları, proje genelinde tutarlı olacaktır.

2. **İsimlendirme:**
   - Backend: PascalCase (sınıflar, metotlar, özellikler)
   - Frontend: PascalCase (komponentler), camelCase (değişkenler, fonksiyonlar)
   - Tüm isimlendirmeler, anlaşılır ve açıklayıcı olacaktır.

3. **Yorum Satırları:**
   - Tüm kod dosyaları ve fonksiyonların başına // ile başlayan Türkçe yorum satırları eklenecektir.
   - Karmaşık logic'ler için açıklayıcı yorumlar eklenecektir.

## 4. State Yönetimi ve API İstekleri

1. **State Yönetimi:**
   - Frontend'de state yönetimi için Context API kullanılacaktır.
   - Global state, ilgili context provider içinde tutulacaktır.

2. **API İstekleri:**
   - API istekleri, `services` klasörü altında toplanacaktır.
   - API istekleri için async/await yapısı kullanılacaktır.
   - Tüm API isteklerinde hata yakalama (try/catch) uygulanacaktır.
   - API isteklerinin durumu (loading, error, success) yönetilecektir.

## 5. Veri Tabanı ve Migration Kuralları

1. **Entity Framework Code First:**
   - Veritabanı işlemleri Entity Framework Core ile yapılacaktır.
   - Code First yaklaşımı ile tablolar oluşturulacaktır.
   - Migration'lar açıklayıcı isimlerle kaydedilecektir.

2. **Multi-tenant Yapı:**
   - Tüm tablolarda FirmaID alanı bulunacaktır.
   - Şube yapısı için tüm tablolarda SubeID alanı bulunacaktır.
   - Tüm sorgularda firma ve şube filtrelemesi yapılacaktır.

3. **İlişkisel Yapı:**
   - Tablolar arasındaki ilişkiler doğru kurulacaktır.
   - Navigation property'ler ve foreign key'ler uygun şekilde tanımlanacaktır.

## 6. Güvenlik ve Yetkilendirme

1. **JWT Authentication:**
   - Kimlik doğrulama için JWT token kullanılacaktır.
   - Token'lar kısa süreli (maksimum 1 saat) olacaktır.
   - Refresh token mekanizması uygulanacaktır.

2. **Rol Tabanlı Yetkilendirme:**
   - Kullanıcı rolleri tanımlanacaktır (Admin, Firma Yöneticisi, Teknik, Servis, vb.).
   - Her rol için erişilebilir işlemler belirlenecektir.
   - API endpoint'lerinde ve frontend sayfalarında yetki kontrolü yapılacaktır.

## 7. Hata Yönetimi

1. **Backend Hata Yönetimi:**
   - Global exception handler kullanılacaktır.
   - Hatalar merkezi olarak loglanacaktır.
   - API yanıtlarında standart hata formatı kullanılacaktır.

2. **Frontend Hata Yönetimi:**
   - Tüm API isteklerinde try/catch kullanılacaktır.
   - Kullanıcıya anlamlı hata mesajları gösterilecektir.
   - Hatalar, kullanıcı dostu bir şekilde görüntülenecektir.

3. **Hata Ayıklama Yaklaşımı:**
   - Hata kaynağını bulmak için sistematik adımlar izlenecektir.
   - Çözüm uygulanmadan önce yan etkileri değerlendirilecektir.
   - Tüm hatalar ve çözümleri belgelenecektir.

## 8. Performans ve Optimizasyon

1. **Backend Optimizasyonu:**
   - Database sorguları optimize edilecektir.
   - N+1 sorgu problemi engellenecektir.
   - API yanıtları için uygun caching mekanizmaları kullanılacaktır.

2. **Frontend Optimizasyonu:**
   - Büyük komponentler için lazy loading kullanılacaktır.
   - Gereksiz render'lar önlenecektir (React.memo, useMemo, useCallback).
   - Bundle size optimizasyonu yapılacaktır.

## 9. Test Stratejisi

1. **Backend Testleri:**
   - Unit testler için xUnit kullanılacaktır.
   - Repository ve service katmanları için birim testler yazılacaktır.
   - API endpoint'leri için entegrasyon testleri yazılacaktır.

2. **Frontend Testleri:**
   - Unit testler için Jest ve React Testing Library kullanılacaktır.
   - Önemli komponentler için birim testler yazılacaktır.
   - Kullanıcı akışları için E2E testler yazılacaktır (Cypress).

## 10. Versiyon Kontrolü ve Deployment

1. **Git Kullanımı:**
   - Her yeni özellik veya düzeltme, ayrı bir branch üzerinde geliştirilecektir.
   - Commit mesajları açıklayıcı ve tutarlı olacaktır.
   - Pull request ile code review sonrası merge yapılacaktır.

2. **CI/CD Pipeline:**
   - Otomatik build, test ve deployment için CI/CD pipeline kurulacaktır.
   - Her commit sonrası testler otomatik çalıştırılacaktır.
   - Test başarısız olursa merge engellenecektir.

## 11. Cursor Uygulaması İçin Ek Kurallar

1. **Uygulama Bütünlüğü:**
   - Yapılan değişiklikler, mevcut mimariyi ve yapıyı bozmayacaktır.
   - Bir dosya değiştirildiğinde, içindeki tüm fonksiyonlar korunacak veya uygun şekilde yeni yapıya taşınacaktır.
   - Tüm arayüz metinleri Türkçe olacaktır.

2. **Dokümantasyon:**
   - Her değişiklik, CHANGELOG.md dosyasına eklenecektir.
   - Önemli fonksiyonlar ve API'ler dokümante edilecektir.
   - Her ekran için kullanım kılavuzu eklenecektir.

3. **Teknik Borç Yönetimi:**
   - Her sprint sonunda kod refaktör edilecektir.
   - Teknik borçlar giderilecek ve kod kalitesi artırılacaktır.
   - Kullanılmayan kod ve bağımlılıklar temizlenecektir.

4. **Geliştirme Sıralaması:**
   - Önce backend API ve veritabanı geliştirilecektir.
   - Sonra frontend web uygulaması geliştirilecektir.
   - En son mobil uygulama geliştirilecektir.
   - Her aşama tamamlanmadan sonraki aşamaya geçilmeyecektir.


## 12. Diğer önemli kurallar

1. **diğer Kurallar bütünü:**
   - tüm kod sayfası ve kod blokalrında // ile başlayan yorum satırları kullanacaksın
   - ekrana herzaman Türkçe yazacaksın
   - ekrana herzaman türkçe yazacaksın


Bu kurallar, Rezidans ve Site Yönetim Sistemi projesinin Cursor uygulaması üzerinde geliştirme sürecinde uyulması gereken prensipleri belirlemektedir. Tüm geliştirme ekibi, bu kurallara uygun çalışmalıdır.